#!/bin/bash
# Worktree Manager Shell Wrapper
# This wrapper allows the Python script to change the shell's working directory

# Try to find the Python script
if command -v worktree-manager.py >/dev/null 2>&1; then
    # Found in PATH - get the full path
    PYTHON_SCRIPT="$(command -v worktree-manager.py)"
else
    # Determine script directory - handle both sourced and executed cases
    if [[ -n "${BASH_SOURCE[0]}" ]]; then
        # Script is being sourced
        SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
    else
        # Script is being executed directly
        SCRIPT_DIR="$(dirname "$0")"
    fi

    # Convert to absolute path to handle relative paths properly
    SCRIPT_DIR="$(cd "$SCRIPT_DIR" && pwd)"

    if [[ -f "$SCRIPT_DIR/worktree-manager.py" ]]; then
        PYTHON_SCRIPT="$SCRIPT_DIR/worktree-manager.py"
    else
        echo "Error: Could not find worktree-manager.py in $SCRIPT_DIR" >&2
        return 1 2>/dev/null || exit 1
    fi
fi

# Run the Python script and capture output
result=$(python3 "$PYTHON_SCRIPT" "$@")
exit_code=$?

# If successful and result is a valid directory path, cd to it
if [[ $exit_code -eq 0 && -d "$result" ]]; then
    cd "$result"
elif [[ -n "$result" ]]; then
    # Print any other output (like list commands, errors)
    echo "$result"
fi

# Use return instead of exit when sourced to avoid closing the shell
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    return $exit_code
else
    exit $exit_code
fi